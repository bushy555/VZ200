
DEFINEWINDOW    0 0 8 30

DEFINEFONT             $00,$00,$00,$00,$00,$00,$00,$00 ; space 
                       $0c,$0c,$0c,$0c,$00,$00,$0c,$00 ; !
                       $cC,$cC,$00,$00,$00,$00,$00,$00 ; "
                       $00,$cC,$Fc,$cC,$cc,$fC,$cC,$00 ; #
                       $30,$30,$3c,$c0,$30,$0C,$f0,$30 ; $
                       $cc,$cc,$0c,$30,$30,$c0,$cc,$cc ; %
                       $30,$cc,$cc,$30,$cf,$cc,$33,$00 ; &
                       $30,$c0,$00,$00,$00,$00,$00,$00 ; '
                       $0c,$30,$30,$30,$30,$30,$0c,$00 ; (
                       $30,$0c,$0c,$0c,$0c,$0c,$30,$00 ; )
                       $00,$cc,$30,$fc,$30,$cc,$00,$00 ; *
                       $00,$30,$30,$FC,$30,$30,$00,$00 ; +
                       $00,$00,$00,$00,$00,$30,$30,$c0 ; ,
                       $00,$00,$00,$FC,$00,$00,$00,$00 ; -
                       $00,$00,$00,$00,$00,$00,$30,$00 ; .
                       $0c,$0C,$0c,$30,$30,$C0,$c0,$c0 ; /

                       $30,$cc,$cc,$cc,$cc,$cc,$30,$00 ; 0
                       $30,$f0,$30,$30,$30,$30,$30,$00 ; 1
                       $30,$cc,$0c,$0c,$30,$c0,$Fc,$00 ; 2
                       $30,$cc,$0c,$30,$0c,$cc,$30,$00 ; 3
                       $0c,$3c,$cc,$cc,$cc,$Fc,$0c,$00 ; 4
                       $fc,$c0,$c0,$f0,$0c,$cc,$30,$00 ; 5
                       $0c,$30,$c0,$f0,$cc,$cc,$30,$00 ; 6
                       $fc,$0c,$0c,$30,$C0,$c0,$c0,$00 ; 7
                       $30,$cc,$cc,$30,$cc,$cc,$30,$00 ; 8
                       $30,$cc,$cc,$3c,$0c,$30,$c0,$00 ; 9
                       $00,$30,$30,$00,$30,$30,$00,$00 ; :
                       $00,$30,$30,$00,$30,$30,$c0,$00 ; ;
                       $00,$0c,$30,$c0,$30,$0c,$00,$00 ; <
                       $00,$00,$FC,$00,$00,$FC,$00,$00 ; =
                       $00,$c0,$30,$0c,$30,$c0,$00,$00 ; >
                       $30,$CC,$0C,$30,$30,$00,$30,$00 ; ?

                       $00,$00,$3c,$cc,$cc,$C0,$3c,$00 ; @
                       $30,$cc,$cc,$fc,$cc,$cc,$cc,$00 ; A
                       $f0,$cc,$cc,$f0,$cc,$cc,$f0,$00 ; B
                       $30,$cc,$c0,$c0,$c0,$cc,$30,$00 ; C
                       $f0,$cc,$cc,$cc,$cc,$cc,$f0,$00 ; D
                       $fc,$c0,$c0,$fc,$c0,$c0,$Fc,$00 ; E
                       $fc,$c0,$c0,$f0,$c0,$c0,$c0,$00 ; F
                       $30,$cc,$c0,$c0,$cc,$cc,$3c,$00 ; G
                       $cc,$cc,$cc,$fc,$cc,$cc,$cc,$00 ; H
                       $30,$30,$30,$30,$30,$30,$30,$00 ; I
                       $0c,$0C,$0C,$0C,$0C,$cC,$30,$00 ; J
                       $cc,$cc,$cc,$f0,$cc,$cc,$cc,$00 ; K
                       $c0,$c0,$c0,$c0,$c0,$c0,$fc,$00 ; L
                       $cc,$cc,$fc,$cc,$cc,$cc,$cc,$00 ; M
                       $f0,$cc,$cc,$cc,$cc,$cc,$cc,$00 ; N
                       $30,$cc,$cc,$cc,$cc,$cc,$30,$00 ; O

                       $f0,$cc,$cc,$f0,$c0,$c0,$c0,$00 ; P
                       $30,$cc,$cc,$cc,$fc,$cc,$3c,$00 ; Q
                       $f0,$cc,$cc,$f0,$cc,$cc,$cc,$00 ; R
                       $30,$cc,$c0,$30,$0c,$cc,$30,$00 ; S
                       $fc,$30,$30,$30,$30,$30,$30,$00 ; T
                       $cc,$cc,$cc,$cc,$cc,$cc,$3c,$00 ; U
                       $cc,$cc,$cc,$cc,$cc,$cc,$30,$00 ; V
                       $cc,$cc,$cc,$cc,$fc,$cc,$cc,$00 ; W
                       $cc,$cc,$cc,$30,$cc,$cc,$cc,$00 ; X
                       $cc,$cc,$cc,$fc,$30,$30,$30,$00 ; Y
                       $fc,$0c,$0c,$30,$c0,$c0,$fc,$00 ; Z
                       $f0,$c0,$c0,$c0,$c0,$c0,$f0,$00 ; [
                       $C0,$c0,$c0,$30,$30,$0c,$0c,$0c ; \
                       $3c,$0c,$0c,$0c,$0c,$0c,$3c,$00 ; ]
                       $30,$cc,$00,$00,$00,$00,$00,$00 ; ^

                       $00,$00,$00,$00,$00,$00,$00,$fc ; _
                       $30,$c0,$00,$00,$00,$00,$00,$00 ; `
                       $00,$00,$3C,$CC,$CC,$CC,$3C,$00 ; a
                       $C0,$C0,$f0,$cc,$cc,$cc,$f0,$00 ; b
                       $00,$00,$3c,$c0,$c0,$c0,$3c,$00 ; c
                       $0c,$0c,$3c,$cc,$cc,$cc,$3c,$00 ; d
                       $00,$00,$30,$cc,$fc,$c0,$3c,$00 ; e
                       $3C,$30,$fc,$30,$30,$30,$30,$00 ; f
                       $00,$00,$3c,$cc,$cc,$3c,$cc,$30 ; g
                       $c0,$c0,$fc,$cc,$cc,$cc,$cc,$00 ; h
                       $30,$00,$f0,$30,$30,$30,$fC,$00 ; i
                       $30,$00,$f0,$30,$30,$30,$30,$c0 ; j
                       $c0,$c0,$cc,$f0,$f0,$cc,$cc,$00 ; k
                       $f0,$30,$30,$30,$30,$30,$fC,$00 ; l
                       $00,$00,$cc,$fc,$cc,$cc,$cc,$00 ; m
                       $00,$00,$fc,$cc,$cc,$cc,$cc,$00 ; n

                       $00,$00,$30,$cc,$cc,$cc,$30,$00 ; o
                       $00,$00,$f0,$cc,$cc,$cc,$f0,$c0 ; p
                       $00,$00,$3c,$cc,$cc,$cc,$3c,$0c ; q
                       $00,$00,$fc,$cc,$c0,$c0,$c0,$00 ; r
                       $00,$00,$3c,$c0,$30,$0c,$f0,$00 ; s
                       $30,$30,$fc,$30,$30,$30,$3C,$00 ; t
                       $00,$00,$cc,$cc,$cc,$cc,$fc,$00 ; u
                       $00,$00,$cc,$cc,$cc,$cc,$30,$00 ; v
                       $00,$00,$cc,$cc,$cc,$fc,$cc,$00 ; w
                       $00,$00,$cc,$cc,$30,$cc,$cc,$00 ; x
                       $00,$00,$cc,$cc,$fc,$30,$30,$00 ; y
                       $00,$00,$fc,$0c,$30,$c0,$fc,$00 ; z
                       $0C,$30,$30,$c0,$30,$30,$0C,$00 ; {
                       $0c,$0c,$0c,$0c,$0c,$0c,$0c,$0c ; |
                       $c0,$30,$30,$0C,$30,$30,$c0,$00 ; }
                       $00,$f0,$00,$00,$00,$00,$00,$00 ; ~
                       $ff,$ff,$ff,$ff,$ff,$ff,$ff,$00 ; 

DEFINEBLOCK     EMPTYBLOCK
                0 0 0 0 0 0 0 0
                $38


DEFINESPRITE    1
                0 0 192 0 56 0 30 0 1 240 95 0 51 255 28 60
                15 240 3 192 7 0 12 0 16 0 0 0 0 0 0 0

DEFINESPRITE    1
                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0


DEFINESCREEN
                  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
                  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
                  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
                  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
                  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
                  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
                  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
                  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
SPRITEPOSITION  0 0 24 124
SPRITEPOSITION  1 1 45 248

DEFINEOBJECT    71 254 56 120
                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

MAP             WIDTH 3
                STARTSCREEN 255
                255   0 255
ENDMAP

EVENT PLAYER
; SPAWN 1 1
 LET M = 0

 IF KEY UP
  LET M = 1
  IF CANGOUP
   SPRITEUP
  ENDIF
 ENDIF

 IF KEY DOWN
  LET M = 1
  IF CANGODOWN
   SPRITEDOWN
  ENDIF
 ENDIF

 IF KEY LEFT
  LET M = 1
  IF CANGOLEFT
   SPRITELEFT
  ENDIF
 ENDIF

 IF KEY RIGHT
  LET M = 1
  IF CANGORIGHT
   SPRITERIGHT
  ENDIF
 ENDIF

 IF M > 0
  ANIMATE
 ENDIF

 IF COLLISION BULLET
   EXIT
 ENDIF

EVENT SPRITETYPE1
    LET X = RIGHTEDGE                   ; move it to the right edge.
;    ADD 8 TO X                          ; move centre of sprite to the very edge.
SUBTRACT 16 FROM X
    IF H = 0
        LET H = BOTTOMEDGE
        ADD 9 TO H
    ENDIF
    LET Y = H                           ; set the height.
    NEWPARTICLE 25
ADD I TO H                              ; adjust height by increment.

IF P = 0                                ; no pixels left to plot.
    IF H > BOTTOMEDGE
        GETRANDOM 3                     ; up or level.
        SUBTRACT 2 FROM RND
    ELSE
        LET K = BOTTOMEDGE
        SUBTRACT 32 FROM K
        IF H < K                        ; too close to top?
            GETRANDOM 3                 ; down or level.
        ELSE
            GETRANDOM 5                 ; up, down or level.
            SUBTRACT 2 FROM RND
        ENDIF
    ENDIF
    LET I = RND                         ; put y increment/decrement in I.
    LET P = 8
ENDIF

SUBTRACT 1 FROM P

LET K = TOPEDGE
ADD 32 TO K
IF H < K                                ; too close to top?
    LET I = 2                           ; force landscape down.
ENDIF

;REMOVE                                  ; remove our dummy sprite before it is displayed.

EVENT SPRITETYPE2

EVENT SPRITETYPE3

EVENT SPRITETYPE4

EVENT SPRITETYPE5

EVENT SPRITETYPE6

EVENT SPRITETYPE7

EVENT SPRITETYPE8

EVENT INITSPRITE

EVENT MAINLOOP1

DEFINEPARTICLE
PARTICLELEFT
PARTICLELEFT
PARTICLELEFT
PARTICLELEFT
PARTICLELEFT
PARTICLELEFT

EVENT MAINLOOP2

EVENT INTROMENU
CLS

EVENT GAMEINIT

EVENT RESTARTSCREEN

EVENT FELLTOOFAR

EVENT KILLPLAYER

EVENT LOSTGAME

EVENT COMPLETEDGAME

EVENT NEWHIGHSCORE

EVENT COLLECTBLOCK
